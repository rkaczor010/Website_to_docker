- name: Get Apache2 configuration file path
  ansible.builtin.shell: apachectl -V
  register: apache2_config_file
  failed_when: apache2_config_file.rc != 0
  changed_when: false

- name: Extract Apache2 configuration root path
  set_fact:
    apache2_root_path: "{{ apache2_config_file.stdout | regex_search('HTTPD_ROOT=\"([^\"]+)\"', '\\1') | first }}"

- name: Extract Apache2 configuration file path
  set_fact:
    apache2_config_file_path: "{{ apache2_root_path }}/{{ apache2_config_file.stdout | regex_search('SERVER_CONFIG_FILE=\"([^\"]+)\"', '\\1') | first }}"

- name: Display Apache2 configuration directory
  debug:
    msg: "Apache2 configuration directory is: {{ apache2_config_file_path }}"
######################

- name: Find all files in {{ apache2_root_path }}/sites-available/ directory
  find:
    paths: "{{ apache2_root_path }}/sites-available"
    recurse: yes
    file_type: file
  register: apache2_sitesavailable_files

- name: Find all files in {{ apache2_root_path }}/sites-enabled/ directory
  find:
    paths: "{{ apache2_root_path }}/sites-enabled"
    recurse: yes
    file_type: file
  register: apache2_sitesenabled_files

- name: Combine files from both directories
  set_fact:
    apache2_sites_files: "{{ apache2_sitesenabled_files.files + apache2_sitesavailable_files.files }}"

- name: Extract the paths of all files
  set_fact:
    apache2_sites_files_paths: "{{ apache2_sites_files | map(attribute='path') | list }}"

- name: Display all file paths
  debug:
    var: apache2_sites_files_paths

- name: Read content of each SSL configuration file
  slurp:
    path: "{{ item }}"
  loop: "{{ apache2_sites_files_paths }}"
  register: file_contents

- name: Search SSL certificate and key paths in each file
  debug:
    msg: "{{ item.item }}: {{ item.content | b64decode | regex_findall('^\\s*(SSLCertificateFile|SSLCertificateKeyFile)\\s+([^\s#]+)') }}"
  loop: "{{ file_contents.results }}"
  when: item.content is defined

- name: Display unique SSLCertificateFile paths
  debug:
    msg: "{{ item | unique }}"
  loop: "{{ file_contents.results | map(attribute='content') | map('b64decode') | map('regex_findall', '^\\s*(SSLCertificateFile|SSLCertificateKeyFile)\\s+([^\s#]+)') | flatten }}"
###

- name: Search for DocumentRoot directive in Apache2 config files
  command: grep -r "DocumentRoot" {{ apache2_root_path }}/sites-available/
  register: apache2_documentroot_otput
  failed_when: false

- name: Extract and filter unique DocumentRoot paths
  set_fact:
    apache2_document_roots: "{{ apache2_documentroot_otput.stdout_lines | select('search', 'DocumentRoot') | map('regex_replace', '.*DocumentRoot\\s+(.*)', '\\1') | unique | list }}"

- name: Display unique DocumentRoot paths
  debug:
    msg: "{{ apache2_document_roots }}"


###############

# - name: Search for SSLCertificateKeyFile and SSLCertificateFile directives in Apache2 config files (sites-available and sites-enabled)
#   command: grep -r -E "SSLCertificateFile|SSLCertificateKeyFile" {{ apache2_root_path }}/sites-available/ {{ apache2_root_path }}/sites-enabled/
#   register: apache2_ssl_certificate_paths_output
#   failed_when: false

# - name: Extract and filter unique SSLCertificate paths (SSLCertificateFile and SSLCertificateKeyFile)
#   set_fact:
#     apache2_sslcertificate_paths: >
#       {{
#         apache2_ssl_certificate_paths_output.stdout_lines |
#         select('search', 'SSLCertificateFile|SSLCertificateKeyFile') | 
#         select('search', '^\\s*[^#]') |
#         map('regex_replace', '^.*SSLCertificate(File|KeyFile)\\s+([^\s]+).*$', '\\2') | 
#         unique | 
#         list |
#         default([])
#       }}

# - name: Display unique SSLCertificate paths (both SSLCertificateFile and SSLCertificateKeyFile)
#   debug:
#     msg: "{{ apache2_sslcertificate_paths }}"



- name: Search for SSLCertificateFile  directive in Apache2 config files
  command: grep -r "SSLCertificateFile" {{ apache2_root_path }}/sites-available/
  register: apache2_sslcrtificatefile_otput
  failed_when: false

- name: Extract and filter unique SSLCertificateFile paths
  set_fact:
    apache2_sslcertificatefile_path: "{{ apache2_sslcrtificatefile_otput.stdout_lines | select('search', '^(?!\\s*#).*SSLCertificateFile') | map('regex_replace', '.*SSLCertificateFile\\s+(.*)', '\\1') | unique | list | default('') }}"
- name: Display unique SSLCertificateFile paths
  debug:
    msg: "{{ apache2_sslcrtificatefile_otput }}"

- name: Display unique SSLCertificateFile paths
  debug:
    msg: "{{ apache2_sslcertificatefile_path }}"


- name: Search for SSLCertificateKeyFile directive in Apache2 config files
  command: grep -r "SSLCertificateKeyFile" {{ apache2_root_path }}/sites-available/
  register: apache2_sslcertificatekeyfile_otput
  failed_when: false

- name: Extract and filter unique SSLCertificateKeyFile paths
  set_fact:
    apache2_sslcertificatekeyfile_path:"{{ apache2_sslcrtificatefile_otput.stdout_lines | select('search', '^(?!\\s*#).*SSLCertificateKeyFile') | map('regex_replace', '.*SSLCertificateKeyFile\\s+(.*)', '\\1') | unique | list | default('') }}"

- name: Display unique SSLCertificateKeyFile paths
  debug:
    msg: "{{ apache2_sslcertificatekeyfile_path }}"

- name: Create directory for apache2 backup in {{ rootless_user }} home directory
  file:
    path: /home/{{ rootless_user }}/apache2
    state: directory
    owner: "{{ rootless_user }}"
    group: "{{ rootless_user }}"
    mode: '0755'

- name: Backup apache2 config recursively while preserving file permissions
  ansible.builtin.copy:
    src: "{{ apache2_root_path }}/"
    dest: /home/{{ rootless_user }}/apache2{{ apache2_root_path }}
    mode: preserve
    force: true

- name: Backup apache2 content recursively while preserving file permissions
  ansible.builtin.copy:
    src: "{{ item }}/"
    dest: /home/{{ rootless_user }}/apache2{{ item }}
    mode: preserve
    force: true
  loop: "{{ apache2_document_roots }}"

- name: Backup apache2 SSLCertificateKeyFile recursively while preserving file permissions
  ansible.builtin.copy:
    src: "{{ item }}/"
    dest: /home/{{ rootless_user }}/apache2{{ item }}
    mode: preserve
    force: true
  loop: "{{ apache2_sslcertificatekeyfile_path }}"

- name: Backup apache2 SSLCertificateFile recursively while preserving file permissions
  ansible.builtin.copy:
    src: "{{ item }}/"
    dest: /home/{{ rootless_user }}/apache2{{ item }}
    mode: preserve
    force: true
  loop: "{{ apache2_sslcertificatefile_path }}"

- name: Change owner of /home/{{ rootless_user }}/apache2 recursivelly
  ansible.builtin.file:
    path: /home/{{ rootless_user }}/apache2
    owner: "{{ rootless_user }}"
    group: "{{ rootless_user }}"
    recurse: yes