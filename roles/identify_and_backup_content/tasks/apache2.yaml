- name: Get Apache2 configuration file path
  ansible.builtin.shell: apachectl -V
  register: apache2_config_file
  failed_when: apache2_config_file.rc != 0
  changed_when: false

# Apache2 apache2.conf config path
- name: Extract Apache2 configuration root path
  set_fact:
    apache2_root_path: "{{ apache2_config_file.stdout | regex_search('HTTPD_ROOT=\"([^\"]+)\"', '\\1') | first }}"

- name: Extract Apache2 configuration file path
  set_fact:
    apache2_config_file_path: "{{ apache2_root_path }}/{{ apache2_config_file.stdout | regex_search('SERVER_CONFIG_FILE=\"([^\"]+)\"', '\\1') | first }}"

- name: Display Apache2 configuration directory
  debug:
    msg: "Apache2 configuration directory is: {{ apache2_config_file_path }}"

# DocumentRoot in apache2
- name: Search for DocumentRoot directive in Apache2 config files
  command: grep -r "DocumentRoot" {{ apache2_root_path }}/sites-available/ {{ apache2_root_path }}/sites-enabled/
  register: apache2_documentroot_otput
  failed_when: false

- name: Extract and filter unique DocumentRoot paths
  set_fact:
    apache2_document_roots: "{{ apache2_documentroot_otput.stdout_lines | select('search', 'DocumentRoot') | map('regex_replace', '.*DocumentRoot\\s+(.*)', '\\1') | unique | list }}"

- name: Display unique DocumentRoot paths
  debug:
    msg: "{{ apache2_document_roots }}"

# SSLCertificateFile
- name: Search for SSLCertificateFile  directive in Apache2 config files
  command: grep -r "SSLCertificateFile" {{ apache2_root_path }}/sites-available/ {{ apache2_root_path }}/sites-enabled/
  register: apache2_sslcrtificatefile_otput
  failed_when: false

- name: Extract and filter unique SSLCertificateFile paths
  set_fact:
    apache2_sslcertificatefile_path: "{{ apache2_sslcrtificatefile_otput.stdout_lines | select('search', 'SSLCertificateFile') | map('regex_replace', '.*SSLCertificateFile\\s+(.*)', '\\1') | unique | list }}"

- name: Display unique SSLCertificateFile paths
  debug:
    msg: "{{ apache2_sslcertificatefile_path }}"

# SSLCertificateKeyFile
- name: Search for SSLCertificateKeyFile directive in Apache2 config files
  command: grep -r "SSLCertificateKeyFile " {{ apache2_root_path }}/sites-available/ {{ apache2_root_path }}/sites-enabled/
  register: apache2_sslcertificatekeyfile_otput
  failed_when: false

- name: Extract and filter unique SSLCertificateKeyFile paths
  set_fact: 
    apache2_sslcertificatekeyfile_path:  "{{ apache2_sslcertificatekeyfile_otput.stdout_lines | select('search', 'SSLCertificateKeyFile') | map('regex_replace', '.*SSLCertificateKeyFile\\s+(.*)', '\\1') | unique | list }}"

- name: Display unique SSLCertificateKeyFile paths
  debug:
    msg: "{{ apache2_sslcertificatekeyfile_path }}"

# Backup

- name: Create directory for apache2 backup in {{ rootless_user }} home directory
  file:
    path: /home/{{ rootless_user }}/apache2
    state: directory
    owner: "{{ rootless_user }}"
    group: "{{ rootless_user }}"
    mode: '0755'

- name: Backup apache2 config recursively while preserving file permissions
  ansible.builtin.copy:
    src: "{{ apache2_root_path }}/"
    dest: /home/{{ rootless_user }}/apache2{{ apache2_root_path }}
    mode: preserve
    force: true

- name: Backup apache2 content recursively while preserving file permissions
  ansible.builtin.copy:
    src: "{{ item }}/"
    dest: /home/{{ rootless_user }}/apache2{{ item }}
    mode: preserve
    force: true
  loop: "{{ apache2_document_roots }}"
###
- name: Ensure source path is valid
  stat:
    path: "{{ item }}"
  register: source_check
  loop: "{{ apache2_sslcertificatekeyfile_path + apache2_sslcertificatefile_path }}"
  failed_when: source_check.stat.exists == false
  ignore_errors: yes

- name: Ensure destination directories exist
  file:
    path: "{{ item | dirname }}"
    state: directory
    mode: '0755'
  loop: "{{ apache2_sslcertificatekeyfile_path + apache2_sslcertificatefile_path }}"
  when: source_check.results[ansible_loop.index0].stat.exists == true

- name: Copy the file from source to destination
  copy:
    src: "{{ item }}"
    dest: "{{ destination_paths[ansible_loop.index0] }}"
    mode: '0644'
  loop: "{{ apache2_sslcertificatekeyfile_path + apache2_sslcertificatefile_path }}"
  when: source_check.results[ansible_loop.index0].stat.exists == true


###
- name: Backup apache2 SSLCertificateKeyFile recursively while preserving file permissions
  ansible.builtin.copy:
    src: "{{ item }}/"
    dest: /home/{{ rootless_user }}/apache2{{ item }}
    mode: preserve
    force: true
  loop: "{{ apache2_sslcertificatekeyfile_path }}"

- name: Backup apache2 SSLCertificateFile recursively while preserving file permissions
  ansible.builtin.copy:
    src: "{{ item }}/"
    dest: /home/{{ rootless_user }}/apache2{{ item }}
    mode: preserve
    force: true
  loop: "{{ apache2_sslcertificatefile_path }}"

- name: Change owner of /home/{{ rootless_user }}/apache2 recursivelly
  ansible.builtin.file:
    path: /home/{{ rootless_user }}/apache2
    owner: "{{ rootless_user }}"
    group: "{{ rootless_user }}"
    recurse: yes