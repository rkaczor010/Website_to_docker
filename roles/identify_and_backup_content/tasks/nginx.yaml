- name: Set nginx variables
  set_fact:
    nginx_root_path: /etc/nginx
    nginx_config_file_path: /etc/nginx/nginx.conf

# DocumentRoot in nginx
- name: Search for root directive in nginx config files
  command: grep -r "root" {{ nginx_root_path }}/sites-available/ {{ nginx_root_path }}/sites-enabled/ {{ nginx_config_file_path }}
  register: nginx_documentroot_otput
  failed_when: false

- name: Extract and filter unique DocumentRoot paths
  set_fact:
    nginx_document_roots: "{{ nginx_documentroot_otput.stdout_lines | select('search', 'root') | map('regex_replace', '.*root\\s+(.*)', '\\1') | unique | list }}"

- name: Filter list
  set_fact:
    nginx_document_roots: '{{ nginx_document_roots | select("match", "^/[^# \t]*$") | list | unique }}'

- name: Remove ';' from paths
  set_fact:
    nginx_document_roots: "{{ nginx_document_roots | map('regex_replace', ';$', '') | list }}"

- name: Display unique DocumentRoot paths
  debug:
    msg: "{{ nginx_document_roots }}"

# SSL Certificate

- name: Search for ssl_certificate  directive in nginx config files
  command: grep -r "ssl_certificate" {{ nginx_root_path }}/sites-available/ {{ nginx_root_path }}/sites-enabled/ {{ nginx_config_file_path }}
  register: nginx_ssl_certificate_otput
  failed_when: false

- name: Extract and filter unique ssl_certificate paths
  set_fact:
    nginx_sslcertificate_path: "{{ nginx_ssl_certificate_otput.stdout_lines | select('search', 'ssl_certificate') | map('regex_replace', '.*ssl_certificate\\s+(.*)', '\\1') | unique | list }}"

# SSL Certificate key file

- name: Search for ssl_certificate_key  directive in nginx config files
  command: grep -r "ssl_certificate_key" {{ nginx_root_path }}/sites-available/ {{ nginx_root_path }}/sites-enabled/ {{ nginx_config_file_path }}
  register: nginx_sslcertificatekey_otput
  failed_when: false

- name: Extract and filter unique ssl_certificate_key paths
  set_fact:
    nginx_sslcertificatekey_path: "{{ nginx_sslcertificatekey_otput.stdout_lines | select('search', 'ssl_certificate_key') | map('regex_replace', '.*ssl_certificate_key\\s+(.*)', '\\1') | unique | list }}"

- name: Set unique nginx SSL files path
  set_fact:
    nginx_ssl_certs_path_combined: "{{ nginx_sslcertificatekey_path + nginx_sslcertificate_path | list | unique }}"

- name: Filter list
  set_fact:
    nginx_ssl_certs_path: '{{ nginx_ssl_certs_path_combined | select("match", "^/[^# \t]*$") | list | unique }}'

- name: Remove ';' from paths
  set_fact:
    nginx_ssl_certs_path: "{{ nginx_ssl_certs_path | map('regex_replace', ';$', '') | list }}"


- name: Display unique SSLCertificateFile paths
  debug:
    msg: "{{ nginx_ssl_certs_path }}"


# Backup

- name: Create directory for nginx backup in {{ ansible_env.HOME }} home directory
  file:
    path: "{{ ansible_env.HOME }}/nginx"
    state: directory
    mode: '0755'


# Step 1: Find all files and directories in the source path
- name: Find files and directories in the source path
  ansible.builtin.find:
    paths: ""/var/www/html""
    recurse: yes
  register: found_files

# Step 2: Create the directory structure in /tmp
- name: Create the directory structure under /tmp
  ansible.builtin.file:
    path: "/tmp{{ item.path | regex_replace('^/var/www/html', '') }}"
    state: directory
    mode: '0755'
  with_items: "{{ found_files.files }}"
  when: item.isdir

# Step 3: Copy files to /tmp with the same structure
- name: Copy files to /tmp with the same structure
  ansible.builtin.copy:
    src: "{{ item.path }}"
    dest: "/tmp{{ item.path | regex_replace('^/var/www/html', '') }}"
    remote_src: yes
  with_items: "{{ found_files.files }}"
  when: not item.isdir




- name: Backup nginx config recursively while preserving file permissions
  ansible.builtin.copy:
    src: "{{ nginx_root_path }}/"
    dest: "{{ ansible_env.HOME }}/nginx{{ nginx_root_path }}"
    mode: preserve
    force: true
    remote_src: true
  ignore_errors: true

- name: Backup nginx content recursively while preserving file permissions
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ ansible_env.HOME }}/nginx{{ item }}"
    mode: preserve
    force: true
    remote_src: true
  ignore_errors: true
  loop: "{{ nginx_document_roots }}"
 
- name: Create the target directories dynamically
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/nginx/{{ item | regex_replace('^/+', '') | regex_replace('/[^/]+$', '') }}"
    state: directory
    mode: '0755'
  loop: "{{ nginx_ssl_certs_path }}"
  ignore_errors: true

- name: Backup nginx certificates recursively while preserving file permissions
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ ansible_env.HOME }}/nginx{{ item }}"
    mode: preserve
    force: true
    remote_src: true
  loop: "{{ nginx_ssl_certs_path }}"
  ignore_errors: true
  become: true