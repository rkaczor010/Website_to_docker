- name: Set nginx variables
  set_fact:
    nginx_root_path: /etc/nginx
    nginx_config_file_path: /etc/nginx/nginx.conf

# DocumentRoot in nginx
- name: Search for root directive in nginx config files
  command: grep -r "root" {{ nginx_root_path }}/sites-available/ {{ nginx_root_path }}/sites-enabled/ {{ nginx_config_file_path }}
  register: nginx_documentroot_otput
  failed_when: false

- name: Extract and filter unique DocumentRoot paths
  set_fact:
    nginx_document_roots: "{{ nginx_documentroot_otput.stdout_lines | select('search', 'root') | map('regex_replace', '.*root\\s+(.*)', '\\1') | unique | list }}"

- name: Filter list
  set_fact:
    nginx_document_roots: '{{ nginx_document_roots | select("match", "^/[^# \t]*$") | list | unique }}'

- name: Remove ';' from paths
  set_fact:
    nginx_document_roots: "{{ nginx_document_roots | map('regex_replace', ';$', '') | list }}"

- name: Display unique DocumentRoot paths
  debug:
    msg: "{{ nginx_document_roots }}"

# SSL Certificate

- name: Search for ssl_certificate  directive in nginx config files
  command: grep -r "ssl_certificate" {{ nginx_root_path }}/sites-available/ {{ nginx_root_path }}/sites-enabled/ {{ nginx_config_file_path }}
  register: nginx_ssl_certificate_otput
  failed_when: false

- name: Extract and filter unique ssl_certificate paths
  set_fact:
    nginx_sslcertificate_path: "{{ nginx_ssl_certificate_otput.stdout_lines | select('search', 'ssl_certificate') | map('regex_replace', '.*ssl_certificate\\s+(.*)', '\\1') | unique | list }}"

# SSL Certificate key file

- name: Search for ssl_certificate_key  directive in nginx config files
  command: grep -r "ssl_certificate_key" {{ nginx_root_path }}/sites-available/ {{ nginx_root_path }}/sites-enabled/ {{ nginx_config_file_path }}
  register: nginx_sslcertificatekey_otput
  failed_when: false

- name: Extract and filter unique ssl_certificate_key paths
  set_fact:
    nginx_sslcertificatekey_path: "{{ nginx_sslcertificatekey_otput.stdout_lines | select('search', 'ssl_certificate_key') | map('regex_replace', '.*ssl_certificate_key\\s+(.*)', '\\1') | unique | list }}"

- name: Set unique nginx SSL files path
  set_fact:
    nginx_ssl_certs_path_combined: "{{ nginx_sslcertificatekey_path + nginx_sslcertificate_path | list | unique }}"

- name: Filter list
  set_fact:
      nginx_ssl_certs_path: '{{ nginx_ssl_certs_path_combined | select("match", "^/[^# \t]*$") | list | unique }}'

- name: Display unique SSLCertificateFile paths
  debug:
    msg: "{{ nginx_ssl_certs_path }}"


# Backup

- name: Create directory for nginx backup in {{ rootless_user }} home directory
  file:
    path: /home/{{ rootless_user }}/nginx
    state: directory
    owner: "{{ rootless_user }}"
    group: "{{ rootless_user }}"
    mode: '0755'

- name: Backup nginx config recursively while preserving file permissions
  ansible.builtin.copy:
    src: "{{ nginx_root_path }}/"
    dest: /home/{{ rootless_user }}/nginx{{ nginx_root_path }}
    mode: preserve
    force: true
  ignore_errors: true

- name: Backup nginx content recursively while preserving file permissions
  ansible.builtin.copy:
    src: "{{ item }}/"
    dest: /home/{{ rootless_user }}/nginx{{ item }}
    mode: preserve
    force: true
  ignore_errors: true
  loop: "{{ nginx_document_roots }}"
 
- name: Create the target directories dynamically
  ansible.builtin.file:
    path: "/home/{{ rootless_user }}/nginx/{{ item | regex_replace('^/+', '') | regex_replace('/[^/]+$', '') }}"
    state: directory
    mode: '0755'
  loop: "{{ nginx_ssl_certs_path }}"
  ignore_errors: true

- name: Backup nginx certificates recursively while preserving file permissions
  ansible.builtin.copy:
    src: "{{ item }}/"
    dest: /home/{{ rootless_user }}/nginx{{ item }}
    mode: preserve
    force: true
  loop: "{{ nginx_ssl_certs_path }}"
  ignore_errors: true
  become: true

- name: Change owner of /home/{{ rootless_user }}/nginx recursivelly
  ansible.builtin.file:
    path: /home/{{ rootless_user }}/nginx
    owner: "{{ rootless_user }}"
    group: "{{ rootless_user }}"
    recurse: yes



















# - name: Get nginx configuration file path
#   ansible.builtin.shell: nginx -V
#   register: nginx_config_file
#   failed_when: nginx_config_file.rc != 0
#   changed_when: false

# - name: debug
#   debug:
#     msg: "{{ nginx_config_file}}"

# - name: Extract nginx configuration root path
#   set_fact:
#     nginx_root_path_tmp: "{{ nginx_config_file.stderr | regex_search('--conf-path=(.*)', '\\1') | first }}"
#     nginx_root_path: "{{ nginx_root_path_tmp.split(' ')[0] }}"
#     #nginx_config_file_path: "{{ nginx_root_path | regex_replace('/[^/]+$', '') }}"

# # - name: Extract nginx configuration file path
# #   set_fact:
# #     nginx_config_file_path: "{{ nginx_root_path }}/{{ nginx_config_file.stdout | regex_search('SERVER_CONFIG_FILE=\"([^\"]+)\"', '\\1') | first }}"

# - name: Display nginx configuration directory
#   debug:
#     msg: "nginx configuration directory is: {{ nginx_root_path }}"